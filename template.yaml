AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ecommerce-api

  Powertools for AWS Lambda (Python) example

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.10
    Tracing: Active
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:40
    Environment:
      Variables:
        TABLE_NAME: !Ref EcommerceAppTable
        UPDATE_CART_PRODUCT_SQS: !Ref UpdateCartProductsSQS
        POWERTOOLS_SERVICE_NAME: ecommerce-api
        POWERTOOLS_METRICS_NAMESPACE: ecommerce-api-metric
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true


Resources:


  EventSourceDDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      FilterCriteria:
        Filters:
          - Pattern: '{ "dynamodb": { "NewImage": { "order_status": { "S": ["ORDERED"] } } } }'
      EventSourceArn: !GetAtt EcommerceAppTable.StreamArn
      FunctionName: !GetAtt ProcessCartProductsFunction.Arn
      StartingPosition: LATEST


  EcommerceRESTAPI:
    Type: AWS::Serverless::Api
    Properties:
      Description: ecommerce api with api-key authentication
      Name: EcommerceRESTAPI
      StageName: Dev
      Auth:
        ApiKeyRequired: true # sets for all methods

  ###################
   #   SQS
  ###################
  UpdateCartProductsSQS:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 20
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt UpdateCartProductsDLQ.Arn
        maxReceiveCount: 5
  UpdateCartProductsDLQ:
    Type: AWS::SQS::Queue
  UpdateCartProductsFunction:
    Type: AWS::Serverless::Function     # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Handler: update_cart_products.lambda_handler
      CodeUri: py_project
      Description: Lambda function pulls the sqs queue messages and processes the order items
      Architectures:
      - x86_64
      Events:
        RetrieveFromSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt UpdateCartProductsSQS.Arn
            BatchSize: 5
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Connectors:
      SQSConnectors:
        Properties:
          Destination:
            Id: UpdateCartProductsSQS
          Permissions:
            - Read
      updateCartItemsConnector:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
            - Write


  ProcessCartProductsFunction:
    Type: AWS::Serverless::Function     # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Handler: process_cart_products.lambda_handler
      CodeUri: py_project
      Description: Lambda function listens to dynamodb streams, gets order and sends order to sqs
      Architectures:
      - x86_64
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref EcommerceAppTable
            StreamName: !Select [3, !Split ["/", !GetAtt EcommerceAppTable.StreamArn]]

    Connectors:
      SQSConnectors:
        Properties:
          Destination:
            Id: UpdateCartProductsSQS
          Permissions:
            - Write


  ProductLambdaFunction:
    Type: AWS::Serverless::Function     # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Handler: product.lambda_handler
      CodeUri: py_project
      Description: Lambda function for all product endpoints
      Architectures:
      - x86_64
      Events:
        LoadProductPath:
          Type: Api           # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /loadProducts
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
             # Powertools for AWS Lambda (Python) env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
        GetProductPath:
          Type: Api           # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /products/{product_id}
            Method: GET
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
             # Powertools for AWS Lambda (Python) env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
        GetProductsPath:
          Type: Api           # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /products
            Method: GET
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
             # Powertools for AWS Lambda (Python) env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables

    Connectors:
      productConnectors:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
            - Write
            - Read


  OrderLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function with cart and order endpoints'
      CodeUri: py_project/
      Handler: order.lambda_handler
      Events:
        addToCartPath:
          Type: Api  # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /cart/{user_id}
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        getCartItemsPath:
          Type: Api           # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /cart/{user_id}
            Method: GET
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
        orderPath:
          Type: Api           # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
          Properties:
            Path: /order
            Method: POST
            RestApiId: !Ref EcommerceRESTAPI
            Auth:
              ApiKeyRequired: true
    Connectors:
      addToCartConnection:
        Properties:
          Destination:
            Id: EcommerceAppTable
          Permissions:
            - Write
            - Read



  EcommerceAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userOrders
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: orderProducts
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL


Outputs:
  EcommerceRestApi:
    Description: API Gateway endpoint URL for Dev environment for ecommerce rest api
    Value: !Sub "https://${EcommerceRESTAPI}.execute-api.${AWS::Region}.amazonaws.com/Dev"

  ProductLambdaFunction:
    Description: Product Lambda Function ARN
    Value: !GetAtt ProductLambdaFunction.Arn
